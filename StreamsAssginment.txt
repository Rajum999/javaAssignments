package streams;

public class Fruit {
	String name;
	int calories;
	int price;
	String color;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getCalories() {
		return calories;
	}
	public void setCalories(int calories) {
		this.calories = calories;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	public String getColor() {
		return color;
	}
	public void setColor(String color) {
		this.color = color;
	}
	public Fruit(String name, int calories, int price, String color) {
		super();
		this.name = name;
		this.calories = calories;
		this.price = price;
		this.color = color;
	}
	@Override
	public String toString() {
		return "Fruit [name=" + name + ", calories=" + calories + ", price=" + price + ", color=" + color + "]";
	}
	
	

}
package streams;

import java.util.*;
import java.util.function.*;
import java.util.stream.Collectors;

public class Test {
	public static void main(String[] args) {
		@SuppressWarnings("unused")
		List<Fruit> l = Arrays.asList(new Fruit("Gomu Gomu no Mi", 500,100000,"Blue"),
		new Fruit("Mera Mera no Mi", 50,50000,"Yellow"),
		new Fruit("Op Op no Mi", 300,300000,"Red"),
		new Fruit("Goro Goro no Mi ", 700,10000,"White"),
		new Fruit("Mochi Mochi no Mi", 400,400000,"Red"),
		new Fruit("Yami Yami no Mi", 10,100,"Black"));
		Predicate<Fruit> p = e ->e.calories<100;
		Predicate<Fruit> p1 = c ->c.color=="Red";
		
		Comparator<Fruit> c = (s1,s2) ->{
			int l1=s1.calories;
			int l2 = s2.calories;
			if(l1<l2) return 1;
			else if(l1>l2) return -1;
			else return 0;
		};
		Comparator<Fruit> c1 = (s1,s2) ->{
			String l3=s1.name;
			String l4 = s2.name;
			return (l3.compareTo(l4));
		};
		Comparator<Fruit> price = (pr1,pr2) ->{
			int rp1 =pr1.price;
			int rp2 = pr2.price;
			if(rp1<rp2) return -1;
			else if(rp1>rp2) return 1;
			else return 0;
		};
		
		List<Fruit> sortedList = l.stream().filter(p).sorted(c).collect(Collectors.toList());
		sortedList.forEach(System.out::println);
		System.out.println("***********************");
		
		List<Fruit> sortedList1 = l.stream().sorted(c1).collect(Collectors.toList());
		sortedList1.forEach(System.out::println);
		System.out.println("***********************");
		
		List<Fruit> sL = l.stream().filter(p1).sorted(price).collect(Collectors.toList());
		sL.forEach(System.out::println);
		
	}
}
---------------------------------------------------------------------------------------------------------------
package streams;

public class Transaction {
	Trader trader;
	int year;
	int value;
	public Trader getTrader() {
		return trader;
	}
	public void setTrader(Trader trader) {
		this.trader = trader;
	}
	public int getYear() {
		return year;
	}
	public void setYear(int year) {
		this.year = year;
	}
	public int getValue() {
		return value;
	}
	public void setValue(int value) {
		this.value = value;
	}
	public Transaction(Trader trader, int year, int value) {
		super();
		this.trader = trader;
		this.year = year;
		this.value = value;
	}
	@Override
	public String toString() {
		return "Transaction [trader=" + trader + ", year=" + year + ", value=" + value + "]";
	}
	

}
package streams;

import java.util.stream.Collectors;
import java.util.*;

public class Test8 {
	public static void main(String[] args) {
		List<Transaction> list = Arrays.asList(
				new Transaction(new Trader("Lucifer","Pune"),2011,10000),
				new Transaction(new Trader("John snow","Indore"),2005,20000),
				new Transaction(new Trader("Ashur","Delhi"),2010,40000),
				new Transaction(new Trader("Tribiayni","lA"),2011,30000),
				new Transaction(new Trader("Chandler","USA"),2000,10000),
				new Transaction(new Trader("Asta","FlowerCapital"),2011,60000)
				);
		//8th
		List<Integer> sortedList=list.stream().filter(i->i.year==2011).map(x->x.value).sorted().collect(Collectors.toList());
			sortedList.forEach(System.out::println);
		System.out.println("*********************************");	
		//9th
		/*List<Transaction> city =list.stream().distinct().collect(Collectors.toList());
		city.forEach(System.out::println);*/
		list.stream().distinct().forEach(System.out::println);
		System.out.println("******************************");
		
		//10th
		list.stream().filter(i->i.trader.city=="Pune").sorted().forEach(System.out::println);
		System.out.println("*************************************");
		
		//11th
		list.stream().map(x->x.trader.name).sorted().forEach(System.out::println);
		System.out.println("************************************");
		
		//12th
		list.stream().filter(x->x.trader.city.contains("Indore")).map(x->x.trader).forEach(System.out::println);
		System.out.println("***********************************");
		
		//13th
		list.stream().filter(x->x.trader.city=="Delhi").map(x->x.value).forEach(System.out::println);
		System.out.println("*************************************");
		
		//14th
		Integer max =list.stream().map(x->x.value).max((i,j)->i.compareTo(j)).get();
		System.out.println("The maximum valued Transaction "+max);
		
		//15th
		Integer min =list.stream().map(x->x.value).min((i,j)->i.compareTo(j)).get();
		System.out.println("The minimum valued transaction "+min);
	}

}
